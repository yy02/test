"""
序列：在Python中，序列就是一种按照顺序排序的值【数据集合】

在Python中存在三种内置的序列类型：字符串元组和列表
优点：支持索引和切片
特征：第一个正索引为0，指向左端，第一个索引为负数的时候指向右端


切片：【高级特性】可以根据下标来获取序列对象的任意部分数据
语法结构：【start:end:step】 step默认是1


list:Python当中重要的数据结构，是一种有序的数据集合
特点：
1.支持增删改查
2.列表中的数据是可变的【数据项可变，内存地址不会发生变化】
3.用[]来创建列表类型，数据项之间用逗号进行分割，数据项可以是任何类型的数据
4.支持索引和切片操作


元组：是一种不可变的序列，在创建之后不可以做任何的修改
1.不可变
2.用()创建元组类型，数据项之间用逗号分割
3.可以是任何数据类型
4.当元组中只有一个元素时，要加上逗号，不然解释器会当做其他类型来处理
5.同样支持切片操作


字典：也是Python中重要的数据类型，字典是键值对组成的集合，通常使用键来访问数据，
效率非常高，和list一样，支持对数据的增删改查

特点：
1.不是序列类型，没有下表概念，是一个无序的键值集合，是内置的高级数据类型
2.用{}来表示字典对象，每个键值之间用逗号分割
3.键必须是不可变的类型【元组、字符串】  值可以是任意类型
4.每个键必定是唯一的，如果存在重复的键，后置会覆盖前者




Python函数的学习：
def 函数名():
    函数体【一系列的Python语句表示独立的功能】

函数的调用：
    本质就是执行函数定义里面的代码块，在调用之前必须先定义

参数的分类：
必选参数、默认参数【缺省参数】、可选参数、关键字参数
参数：其实就是函数为了实现某项特定的功能，进而为了得到实现功能所需要的数据
        就是为了得到外部数据的
"""

'''1.必选参数'''

# def sum(a, b):  # 这里a和b简称形式参数：形参知识意义上的一个参数，想当于一个标记，定义的时候不占内存地址
#     sum = a + b
#     print(sum)
#     pass


# sum(1, 3)  # 这里的1和3就是实际参数，是占用内存地址的

'''默认参数（缺省参数），始终处在参数列表的尾部，赋值之后后面必须不可以出现必选参数了'''

# def sum1(a=20, b=30):
#     print('默认参数的使用=%d' % (a + b))


# sum1()
# sum1(10)  # 调用时未赋值的值将会使用函数给定时的默认值

'''可变参数（不定长参数）当参数的个数不确定时使用比较灵活'''

# def getComputer(*args):
#     # 计算累加和
#     # print(args)
#     result = 0
#     for item in args:
#         result += item
#     print(result)
#     pass


# getComputer(1, 2, 3, 45, 5)

'''关键字参数'''

# 用**来定义，在函数体内，参数关键字是一个字典类型，key的键是一个字符串
# def keyFunc(**kwargs):
#     print(kwargs)


# 调用
#  keyFunc(1,2,3),不可以这样传
# dictA = {'name': 'alian', 'age': 6}


# keyFunc(**dictA)
# keyFunc(name='peter', age=26)
# keyFunc()  # 不传参数也是可以的，就是一个空字典


# def complexFunc(*args, **kwargs):  # 可选参数必须在关键字参数的前面
#     print(args)
#     print(kwargs)


'''可选参数接受的是一个元组类型，关键字参数接受的是一个字典类型'''

# complexFunc()
# complexFunc(1, 2, 3, 4, name='张三')
# complexFunc(age='36')


'''
函数的返回值：
        函数执行完后会返回一个对象，如果有return将可以返回实际的值，否则就返回none
    类型：可以返回任意类型，返回值类型应该取决于return后面的类型
    用途：给调用方返回数据
    在一个函数体内可以出现多个return关键字，但肯定只能返回一次return
    如果在一个函数体内执行了return就意味着函数推出了，return后面的代码将不会继续执行
    
'''
# def sum(a,b):
#     sum = a+b
#     return sum
#
# print(sum(10,20))
# def calComputer(num):
#     li =[]
#     res = 0
#     i=1
#     while i<=num:
#         res +=i
#         i +=1
#     li.append(res)
#     return li
#
# print(calComputer(10))
# def returnType():
#     # return 1,2,3  #元组类型的返回值
#     return {'name':'li'}  #字典类型的返回值
#
#
# print(type(returnType()))


'''
函数嵌套
'''


def fun1():
    print("------------------fun1 start---------------------")
    print("------------------执行过程省略---------------------")
    print("------------------fun1 end---------------------")


def fun2():
    print("------------------fun2 start------------------")
    fun1()
    print("------------------fun2 end---------------------")


# fun2()

'''
函数的基本类型分类
    1.有参数无返回值的
    def fun(a)
    pass
    2.有参数有返回值的
    def fun(a,b):
        c=a+b
    3.无参数有返回值的
    def fun():
    return info
    4.无参数无返回值的
    def fun():
    print()
'''













