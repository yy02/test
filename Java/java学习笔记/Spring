1.Spring是一个开源的，轻量级，非入侵式的免费容器。（非入侵式指的是在代码中引入Spring后不会对代码产生任何影响）


      Spring的核心理念就是AOP（面向切面编程）和IOC（控制反转）
      IOC支持事务处理，AOP提供对框架的整合支持
      所以可以说
      Spring是一个IOC和AOP的框架

2.首先说一下Spring的七大组件：
                                Spring ORM    Spring Web
                    Spring AOP                                  Spring WebMVC
                                Spring DAO    Spring Context
        ——————————————————————————————————————————以上的六个组件都是在下面核心组件的基础上进行的
                                    Spring Core
                                    
                                    
                                    
3.IOC
      IOC是一种思想，控制反转的思想。
        实现IOC有多种方法，首先就是
                            1.DI依赖注入
                            2.XML配置
                            3.注解
                            4.新版本的Spring可以做到零配置，仅使用Java语句完成注入
                      
4.Spring中bean的写法：
            
            传统Java的写法： 类型 变量名 = new 类型();
            
           <beans>
              <bean id="" class="" />（其中的id指的就是对象的变量名，也就是这个对象的唯一标识符，class指向的是类型(),这里需要写全路径）
             
           <beans/>
           
           
           
           
           
5.IOC创建对象的方式：
              1.使用无参构造器创建对象。（可以写一个有参构造来检测，没有无参构造器的话容器会报错）
                      <properties name="" value=""/>
                      <properties name="" ref=""/>
              2.使用有参构造器：（既然有参数，那么就要选择具体的参数来赋值）    
                                    1.下标赋值                        index=""
                                    2.参数类型赋值                     type=""
                                    3.直接通过参数名称赋值            name=""
                                    
                       IOC即使在XML中写了两个类，但是在创建的时候只产生了一个对象，这说明IOC容器默认是单例的
                       可以通过一次性创建两个对象来进行检测，检测方法是利用Hashcode()方法判断Hashcode是否相等。
                       
                       在配置文件加载的时候，容器中管理的对象就已经初始化了。
             
             
             
                                    
6. 
                                    
                                    
                                    
                                    
                                    
                                    



















































